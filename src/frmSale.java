import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class frmSale extends javax.swing.JPanel {

    public frmSale() {
        initComponents();
        
        tblSale.getTableHeader().setPreferredSize(new java.awt.Dimension(tblSale.getTableHeader().getPreferredSize().width, 40)); 

        tblSale.getTableHeader().setDefaultRenderer(new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                java.awt.Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                c.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 16));
                c.setBackground(new java.awt.Color(57, 117, 247));
                c.setForeground(new java.awt.Color(247, 249, 252));
                return c;
            }
        });
        tblSale.getColumnModel().getColumn(5).setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if (value instanceof ImageIcon) {
                    JLabel label = new JLabel((ImageIcon) value);
                    label.setHorizontalAlignment(JLabel.CENTER); 
                    return label;
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        });
        tblSale.getColumnModel().getColumn(6).setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if (value instanceof ImageIcon) {
                    JLabel label = new JLabel((ImageIcon) value);
                    label.setHorizontalAlignment(JLabel.CENTER); 
                    return label;
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        });
        tblSale.getColumnModel().getColumn(6).setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if (value instanceof ImageIcon) {
                    JLabel label = new JLabel((ImageIcon) value);
                    label.setHorizontalAlignment(JLabel.CENTER);
                    return label;
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        });

        tblSale.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        

        tblSale.getColumnModel().getColumn(0).setPreferredWidth(90);  
        tblSale.getColumnModel().getColumn(1).setPreferredWidth(208);
        tblSale.getColumnModel().getColumn(2).setPreferredWidth(200);  
        tblSale.getColumnModel().getColumn(3).setPreferredWidth(250);
        tblSale.getColumnModel().getColumn(4).setPreferredWidth(270);  
        tblSale.getColumnModel().getColumn(5).setPreferredWidth(550);  
       
        tblSale.revalidate();
        tblSale.repaint();
        fetchData();
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblSale = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        txtStartDate = new com.toedter.calendar.JDateChooser();
        btnSearch = new javax.swing.JButton();
        txtEndDate = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        cbMonthly = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbTotalAmount = new javax.swing.JLabel();
        lbTotalSale = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cbDaily = new javax.swing.JComboBox<>();
        lbTotalCount = new javax.swing.JLabel();

        setBackground(new java.awt.Color(253, 253, 253));
        setMinimumSize(new java.awt.Dimension(1280, 1920));

        tblSale.setAutoCreateRowSorter(true);
        tblSale.setFont(new java.awt.Font("Kh Dangrek", 0, 14));
        tblSale.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "No", "Date", "Total Amount", "Payment Method","SName","Ordered Product",""
            }
        ));
        tblSale.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblSale.setDoubleBuffered(true);
        tblSale.setDragEnabled(true);
        tblSale.setFillsViewportHeight(true);
        tblSale.setFocusCycleRoot(true);
        tblSale.setFocusTraversalPolicyProvider(true);
        tblSale.setInheritsPopupMenu(true);
        tblSale.setRowHeight(50);
        tblSale.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblSale.setShowGrid(false);
        tblSale.setSurrendersFocusOnKeystroke(true);
        jScrollPane2.setViewportView(tblSale);
        tblSale.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("frmSale.jLabel1.text")); // NOI18N

        txtStartDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtStartDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtStartDateMouseClicked(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(51, 51, 255));
        btnSearch.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText(bundle.getString("frmSale.btnSearch.text")); // NOI18N
        btnSearch.setBorder(null);
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtEndDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText(bundle.getString("frmSale.jLabel2.text")); // NOI18N

        cbMonthly.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        cbMonthly.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Month", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        cbMonthly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMonthlyActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText(bundle.getString("frmSale.jLabel3.text")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText(bundle.getString("frmSale.jLabel4.text")); // NOI18N

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText(bundle.getString("frmSale.jLabel5.text")); // NOI18N

        lbTotalAmount.setBackground(new java.awt.Color(0, 153, 255));
        lbTotalAmount.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbTotalAmount.setForeground(new java.awt.Color(0, 255, 102));
        lbTotalAmount.setText(bundle.getString("frmSale.lbTotalAmount.text")); // NOI18N

        lbTotalSale.setBackground(new java.awt.Color(0, 153, 255));
        lbTotalSale.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbTotalSale.setForeground(new java.awt.Color(0, 255, 102));
        lbTotalSale.setText(bundle.getString("frmSale.lbTotalSale.text")); // NOI18N

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText(bundle.getString("frmSale.jLabel6.text")); // NOI18N

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText(bundle.getString("frmSale.jLabel7.text")); // NOI18N

        cbDaily.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        cbDaily.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Date", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }));
        cbDaily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDailyActionPerformed(evt);
            }
        });

        lbTotalCount.setBackground(new java.awt.Color(0, 153, 255));
        lbTotalCount.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbTotalCount.setForeground(new java.awt.Color(0, 255, 102));
        lbTotalCount.setText(bundle.getString("frmSale.lbTotalCount.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1743, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(341, 341, 341)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(1392, 1392, 1392))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(151, 151, 151)
                                            .addComponent(cbDaily, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(cbMonthly, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbTotalCount, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(338, 338, 338))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbTotalSale, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(604, 604, 604)))
                .addGap(218, 218, 218))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbMonthly, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7))
                    .addComponent(lbTotalCount, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbDaily, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbTotalSale, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblSale.getModel();
        model.setRowCount(0);

        boolean monthSelected = cbMonthly.getSelectedIndex() > 0;
        boolean daySelected = cbDaily.getSelectedIndex() > 0;
        boolean dateRangeSelected = txtStartDate.getDate() != null && txtEndDate.getDate() != null;
        if (dateRangeSelected && txtStartDate.getDate().after(txtEndDate.getDate())) {
            fetchData();
            return;
        }

        int selectedCount = (monthSelected ? 1 : 0) + (daySelected ? 1 : 0) + (dateRangeSelected ? 1 : 0);
        if (selectedCount != 1) {
            JOptionPane.showMessageDialog(null,
                "Please select exactly ONE filter:\n" +
                "- Month only\n" +
                "- Day only\n" +
                "- Date range only");
            return;
        }

        if (monthSelected) {
            searchByMonth();
        } else if (daySelected) {
            searchByDay();
        } else if (dateRangeSelected) {
            searchByDateRange();
        }


    }//GEN-LAST:event_btnSearchActionPerformed

    private void cbMonthlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMonthlyActionPerformed
        if (cbMonthly.getSelectedIndex() > 0) {
            cbDaily.setSelectedIndex(0);
            txtStartDate.setDate(null);
            txtEndDate.setDate(null);
        }
       
    }//GEN-LAST:event_cbMonthlyActionPerformed

    private void cbDailyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDailyActionPerformed
        if (cbDaily.getSelectedIndex() > 0) {
            cbMonthly.setSelectedIndex(0);
            txtStartDate.setDate(null);
            txtEndDate.setDate(null);
        }
    }//GEN-LAST:event_cbDailyActionPerformed

    private void txtStartDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtStartDateMouseClicked
        // TODO add your handling code here:
        cbDaily.setSelectedIndex(0);
        cbMonthly.setSelectedIndex(0);
    }//GEN-LAST:event_txtStartDateMouseClicked
    private void searchByMonth() {
        String selectedMonth = cbMonthly.getSelectedItem().toString();

        Map<String, String> monthMap = new HashMap<>();
        monthMap.put("January", "01");
        monthMap.put("February", "02");
        monthMap.put("March", "03");
        monthMap.put("April", "04");
        monthMap.put("May", "05");
        monthMap.put("June", "06");
        monthMap.put("July", "07");
        monthMap.put("August", "08");
        monthMap.put("September", "09");
        monthMap.put("October", "10");
        monthMap.put("November", "11");
        monthMap.put("December", "12");

        String monthNumber = monthMap.get(selectedMonth);
        if (monthNumber == null) {
            JOptionPane.showMessageDialog(null, "Invalid month selection");
            return;
        }

        try (Connection con = DBConnection.getConnection()) {
            String sql = "SELECT s.id, DATE(s.sale_date) AS sale_date, SUM(s.total_amount) AS total_amount, "
                       + "COUNT(s.id) AS total_sales, st.name AS staff_name, s.payment_method, "
                       + "GROUP_CONCAT(CONCAT(p.name, ' (', sd.qty, 'x$', sd.unit_price, ')') SEPARATOR ', ') AS products "
                       + "FROM sale s "
                       + "JOIN staff st ON s.staff_id = st.id "
                       + "JOIN sale_details sd ON s.id = sd.sale_id "
                       + "JOIN product p ON sd.pid = p.id "
                       + "WHERE MONTH(s.sale_date) = ? "
                       + "GROUP BY s.id, DATE(s.sale_date), st.name, s.payment_method "
                       + "ORDER BY sale_date";

            try (PreparedStatement pstmt = con.prepareStatement(sql)) {
                pstmt.setInt(1, Integer.parseInt(monthNumber));
                ResultSet rs = pstmt.executeQuery();
                fillTable(rs);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error searching by month: " + e.getMessage());
        }
    }

    private void searchByDay() {
        String selectedDay = cbDaily.getSelectedItem().toString();

        try (Connection con = DBConnection.getConnection()) {
            String sql = "SELECT s.id, DATE(s.sale_date) AS sale_date, SUM(s.total_amount) AS total_amount, "
                       + "COUNT(s.id) AS total_sales, st.name AS staff_name, s.payment_method, "
                       + "GROUP_CONCAT(CONCAT(p.name, ' (', sd.qty, 'x$', sd.unit_price, ')') SEPARATOR ', ') AS products "
                       + "FROM sale s "
                       + "JOIN staff st ON s.staff_id = st.id "
                       + "JOIN sale_details sd ON s.id = sd.sale_id "
                       + "JOIN product p ON sd.pid = p.id "
                       + "WHERE DAYNAME(s.sale_date) = ? "
                       + "GROUP BY s.id, DATE(s.sale_date), st.name, s.payment_method";

            try (PreparedStatement pstmt = con.prepareStatement(sql)) {
                pstmt.setString(1, selectedDay);
                ResultSet rs = pstmt.executeQuery();
                fillTable(rs);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error searching by day: " + e.getMessage());
        }
    }
    
    private void searchByDateRange() {
        Date startDate = txtStartDate.getDate();
        Date endDate = txtEndDate.getDate();

        if (startDate == null || endDate == null) {

            startDate = getStartOfMonth();  
            endDate = getEndOfMonth();     
        } else {

            Calendar cal = Calendar.getInstance();
            cal.setTime(endDate);
            cal.set(Calendar.HOUR_OF_DAY, 23);
            cal.set(Calendar.MINUTE, 59);
            cal.set(Calendar.SECOND, 59);
            endDate = cal.getTime();
        }

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        try (Connection con = DBConnection.getConnection()) {
            String sql = "SELECT s.id, DATE(s.sale_date) AS sale_date, SUM(s.total_amount) AS total_amount, "
                       + "COUNT(s.id) AS total_sales, st.name AS staff_name, s.payment_method, "
                       + "GROUP_CONCAT(CONCAT(p.name, ' (', sd.qty, 'x$', sd.unit_price, ')') SEPARATOR ', ') AS products "
                       + "FROM sale s "
                       + "JOIN staff st ON s.staff_id = st.id "
                       + "JOIN sale_details sd ON s.id = sd.sale_id "
                       + "JOIN product p ON sd.pid = p.id "
                       + "WHERE s.sale_date BETWEEN ? AND ? "
                       + "GROUP BY s.id, DATE(s.sale_date), st.name, s.payment_method";
            try (PreparedStatement pstmt = con.prepareStatement(sql)) {
                pstmt.setString(1, sdf.format(startDate));
                pstmt.setString(2, sdf.format(endDate));
                ResultSet rs = pstmt.executeQuery();
                fillTable(rs);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error searching by date range: " + e.getMessage());
        }
    }

    private Date getStartOfMonth() {
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.DAY_OF_MONTH, 1);  
        return cal.getTime();
    }

    private Date getEndOfMonth() {
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));  
        cal.set(Calendar.HOUR_OF_DAY, 23);
        cal.set(Calendar.MINUTE, 59);
        cal.set(Calendar.SECOND, 59);
        return cal.getTime();
    }

    private void fillTable(ResultSet rs) {
        DefaultTableModel model = (DefaultTableModel) tblSale.getModel();
        model.setRowCount(0);
        double grandTotal = 0;
        int saleCount = 0;
        try {
            SimpleDateFormat displayFormat = new SimpleDateFormat("dd MMM yyyy HH:mm");
            while (rs.next()) {
                Date saleDate = rs.getTimestamp("sale_date");
                String formattedDate = (saleDate != null) ? displayFormat.format(saleDate) : "";
                double totalAmount = rs.getDouble("total_amount");
                String paymentMethod = rs.getString("payment_method");
                String staffName = rs.getString("staff_name");
                String products = rs.getString("products");
                grandTotal += totalAmount;
                saleCount++;

                model.addRow(new Object[]{
                    rs.getInt("id"),
                    formattedDate,
                    totalAmount,
                    paymentMethod != null ? paymentMethod.toUpperCase() : "",
                    staffName,
                    products
                });
            }
            lbTotalAmount.setText(String.format("$%.2f", grandTotal));
            lbTotalCount.setText(String.valueOf(saleCount));
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, 
                "Error loading data: " + e.getMessage(), 
                "Database Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void fetchData() {
        DefaultTableModel model = (DefaultTableModel) tblSale.getModel();
        model.setRowCount(0); 
        try (Connection con = DBConnection.getConnection();
             Statement stmt = con.createStatement();
             ResultSet rs = stmt.executeQuery(
                 "SELECT s.id, s.sale_date, s.total_amount, " +
                 "s.payment_method, st.name AS staff_name, " +
                 "GROUP_CONCAT(CONCAT(p.name, ' (', sd.qty, 'x$', sd.unit_price, ')') SEPARATOR ', ') AS products " +
                 "FROM sale s " +
                 "JOIN staff st ON s.staff_id = st.id " +
                 "JOIN sale_details sd ON s.id = sd.sale_id " +
                 "JOIN product p ON sd.pid = p.id " +
                 "GROUP BY s.id " +
                 "ORDER BY s.sale_date DESC")) {

            SimpleDateFormat displayFormat = new SimpleDateFormat("dd MMM yyyy HH:mm");
            double grandTotal = 0;
            int saleCount = 0;
            while (rs.next()) {
                Date saleDate = rs.getTimestamp("sale_date");
                String formattedDate = (saleDate != null) ? displayFormat.format(saleDate) : "";
                double totalAmount = rs.getDouble("total_amount");
                String paymentMethod = rs.getString("payment_method");
                String staffName = rs.getString("staff_name");
                String products = rs.getString("products");
                grandTotal += totalAmount;
                saleCount++;

                model.addRow(new Object[]{
                    rs.getInt("id"),
                    formattedDate,
                    totalAmount,
                    paymentMethod != null ? paymentMethod.toUpperCase() : "",
                    staffName,
                    products
                });
            }
            lbTotalAmount.setText(String.format("$%.2f", grandTotal));
            lbTotalCount.setText(String.valueOf(saleCount));
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error fetching data: " + e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbDaily;
    private javax.swing.JComboBox<String> cbMonthly;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbTotalAmount;
    private javax.swing.JLabel lbTotalCount;
    private javax.swing.JLabel lbTotalSale;
    public javax.swing.JTable tblSale;
    private com.toedter.calendar.JDateChooser txtEndDate;
    private com.toedter.calendar.JDateChooser txtStartDate;
    // End of variables declaration//GEN-END:variables
}
