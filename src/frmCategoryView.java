
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

public class frmCategoryView extends javax.swing.JPanel {

    public frmCategoryView() {
        initComponents();
         btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));  
        
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddMouseClicked(evt);
            }
        });
        
        // Set the header height
        tblCategory.getTableHeader().setPreferredSize(new java.awt.Dimension(tblCategory.getTableHeader().getPreferredSize().width, 40)); 

        //tblCategory.getColumnModel().getColumn(0).setPreferredWidth(150);  

        tblCategory.getTableHeader().setDefaultRenderer(new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                java.awt.Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                c.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 16));  
                c.setBackground(new java.awt.Color(57, 117, 247)); 
        
        
                c.setForeground(new java.awt.Color(247, 249, 252));
                return c;
            }
        });
        tblCategory.getColumnModel().getColumn(2).setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if (value instanceof ImageIcon) {
                    JLabel label = new JLabel((ImageIcon) value);
                    label.setHorizontalAlignment(JLabel.CENTER); 
                    return label;
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        });
        
        tblCategory.getColumnModel().getColumn(3).setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if (value instanceof ImageIcon) {
                    JLabel label = new JLabel((ImageIcon) value);
                    label.setHorizontalAlignment(JLabel.CENTER);
                    return label;
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        });


        tblCategory.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        tblCategory.getColumnModel().getColumn(0).setPreferredWidth(200);  
        tblCategory.getColumnModel().getColumn(1).setPreferredWidth(1160);
        tblCategory.getColumnModel().getColumn(2).setPreferredWidth(100);  
        tblCategory.getColumnModel().getColumn(3).setPreferredWidth(100);  

        tblCategory.revalidate();
        tblCategory.repaint();
        txtSearch.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                searchCategory(txtSearch.getText());
           
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                searchCategory(txtSearch.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // This method is needed for compatibility but you can leave it empty.
            }
        });

        fetchData();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAdd = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCategory = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        btnAdd.setText(bundle.getString("frmCategoryView.btnAdd.text_1")); // NOI18N
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText(bundle.getString("frmCategoryView.jLabel1.text_1")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText(bundle.getString("frmCategoryView.jLabel2.text_1")); // NOI18N

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtSearch.setText(bundle.getString("frmCategoryView.txtSearch.text_1")); // NOI18N
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        tblCategory.setAutoCreateRowSorter(true);
        tblCategory.setFont(new java.awt.Font("Kh Dangrek", 0, 14));
        tblCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "ID", "Category_Name","",""
            }
        ));
        tblCategory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblCategory.setDragEnabled(true);
        tblCategory.setFillsViewportHeight(true);
        tblCategory.setRowHeight(50);
        tblCategory.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCategory.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(tblCategory);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1282, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdd)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSearch)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
        searchCategory(txtSearch.getText().trim());
    }//GEN-LAST:event_txtSearchActionPerformed

    
   
    public boolean isEditing = false;  
    public void fetchData() {
       DefaultTableModel model = (DefaultTableModel) tblCategory.getModel();
       model.setRowCount(0);

       try (Connection con = DBConnection.getConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM Category ORDER BY ID ASC")) {

           while (rs.next()) {
               model.addRow(new Object[]{
                   rs.getInt("ID"),
                   rs.getString("name"),
                   new ImageIcon("D:\\Y3S2\\javaII\\TestMainfrm_1\\src\\img\\edit.png"),
                   new ImageIcon("D:\\Y3S2\\javaII\\TestMainfrm_1\\src\\img\\delete.png")
               });
           }

           for (MouseListener listener : tblCategory.getMouseListeners()) {
               tblCategory.removeMouseListener(listener);
           }

           tblCategory.addMouseListener(new MouseAdapter() {
               @Override
               public void mouseClicked(MouseEvent e) {
                   if (isEditing) {
                       return;
                   }
                   int row = tblCategory.rowAtPoint(e.getPoint());
                   int column = tblCategory.columnAtPoint(e.getPoint());

                   if (column == 2) {  
                       isEditing = true; 
                       int id = (int) tblCategory.getValueAt(row, 0);
                       String name = (String) tblCategory.getValueAt(row, 1);

                       frmCategoryAdd catForm = new frmCategoryAdd();
                       catForm.setCategoryData(id, name);
                       btnAdd.setEnabled(false);

                       catForm.addWindowListener(new WindowAdapter() {
                           @Override
                           public void windowClosed(WindowEvent e) {
                               isEditing = false;
                               btnAdd.setEnabled(true);
                           }
                       });

                       catForm.setVisible(true);
                   } else if (column == 3) { 
                       int id = (int) tblCategory.getValueAt(row, 0);
                       int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this Category?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
                       if (confirm == JOptionPane.YES_OPTION) {
                           deleteCategory(id);
                       }
                   }
               }
           });

       } catch (SQLException e) {
           JOptionPane.showMessageDialog(null, "Database connection error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
       }
   }  
    public void deleteCategory(int staffId) {
        Connection con = null;
        PreparedStatement pstmt = null;

        try {
            con = DBConnection.getConnection();
            if (con == null) {
                throw new SQLException("Database connection failed.");
            }

            String sql = "DELETE FROM Category WHERE ID = ?";
            pstmt = con.prepareStatement(sql);
            pstmt.setInt(1, staffId);

            int rowsAffected = pstmt.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Category deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                fetchData();
            } else {
                JOptionPane.showMessageDialog(null, "Error: Category could not be deleted.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (pstmt != null) pstmt.close();
                if (con != null) con.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error closing resources: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    private void btnAddMouseClicked(java.awt.event.MouseEvent evt) {                                     
        btnAdd.setEnabled(false);
        frmCategoryAdd newForm = new frmCategoryAdd(); 
        newForm.setVisible(true); 

        newForm.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                btnAdd.setEnabled(true);            
            }
        });
   }
   public void searchCategory(String keyword) {
        DefaultTableModel model = (DefaultTableModel) tblCategory.getModel();
        model.setRowCount(0);

        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        

        try {
            con = DBConnection.getConnection();
            if (con == null) {
                throw new SQLException("Database connection failed.");
            }

            String sql = "SELECT * FROM Category WHERE LOWER(name) LIKE LOWER(?) ORDER BY ID ASC";
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, "%" + keyword + "%");
            rs = pstmt.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("ID"),
                    rs.getString("name"),
                    new ImageIcon("D:\\Y3S2\\javaII\\TestMainfrm_1\\src\\img\\edit.png"),
                    new ImageIcon("D:\\Y3S2\\javaII\\TestMainfrm_1\\src\\img\\delete.png")
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (con != null) con.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error closing resources: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnAdd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTable tblCategory;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
